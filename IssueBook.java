
package Coding;

import Tables.IssuedBooks_Table;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.compress.utils.IOUtils;

/**
 *
 * @author Hadi
 */
public class IssueBook extends javax.swing.JFrame {

    Image image = null;
    String ImagePath = null;
    byte [] Pic;
    String HasImage = null;
    
    public String Online = "NO";
    
    File file = new File("Icon.png");
    String absolutePath = file.getAbsolutePath().replace("Icon.png", "\\src\\Images\\Icon.png");
    ImageIcon FrameIcon = new ImageIcon(absolutePath);
    
    public IssueBook() {
        initComponents();
        this.setIconImage(FrameIcon.getImage());
        jButtonAddCustomer.setEnabled(false);
        jButtonRentBook.setEnabled(false);
        jButtonAddPicture.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jTextBookNameSearch = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonSearchBookId = new javax.swing.JButton();
        jTextBookPublisher = new javax.swing.JTextField();
        jTextPrice = new javax.swing.JTextField();
        jTextNumbers = new javax.swing.JTextField();
        jTextLocation = new javax.swing.JTextField();
        jComboBoxEdition = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonRentBook = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextCustomer_Id = new javax.swing.JTextField();
        jButtonSearchCustomerId = new javax.swing.JButton();
        jTextCustomerName = new javax.swing.JTextField();
        jTextCustomerLastName = new javax.swing.JTextField();
        jTextCustomerPhone = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaAddress = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jButtonAddCustomer = new javax.swing.JButton();
        dateChooserField = new datechooser.beans.DateChooserCombo();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldPay = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabelPicture = new javax.swing.JLabel();
        jButtonAddPicture = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(216, 216, 216));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jTextBookNameSearch.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jTextBookNameSearch.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextBookNameSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextBookNameSearchKeyTyped(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Rent Book");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Customer Details");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jButtonSearchBookId.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButtonSearchBookId.setText("Search Book ");
        jButtonSearchBookId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchBookIdActionPerformed(evt);
            }
        });

        jTextBookPublisher.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextBookPublisher.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jTextPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextPrice.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jTextNumbers.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextNumbers.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jTextLocation.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextLocation.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jComboBoxEdition.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxEdition.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First Edition", "Second Edition", "Third Edition", "Fourth Edition", "Fifth Edition", "Sixth Edition", "Seventh Edition" }));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Location :");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Availability :");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Price :");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Publisher :");

        jButtonRentBook.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButtonRentBook.setText("Rent Book");
        jButtonRentBook.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRentBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRentBookActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton3.setText("List of Rents");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextCustomer_Id.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jTextCustomer_Id.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextCustomer_Id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextCustomer_IdKeyTyped(evt);
            }
        });

        jButtonSearchCustomerId.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButtonSearchCustomerId.setText("Customer Id :");
        jButtonSearchCustomerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchCustomerIdActionPerformed(evt);
            }
        });

        jTextCustomerName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextCustomerName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextCustomerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextCustomerNameKeyTyped(evt);
            }
        });

        jTextCustomerLastName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextCustomerLastName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextCustomerLastName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextCustomerLastNameKeyTyped(evt);
            }
        });

        jTextCustomerPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextCustomerPhone.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextCustomerPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextCustomerPhoneKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("customer Name :");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Last Name :");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Phone Number :");

        jTextAreaAddress.setColumns(20);
        jTextAreaAddress.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jTextAreaAddress.setLineWrap(true);
        jTextAreaAddress.setRows(5);
        jTextAreaAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextAreaAddressKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextAreaAddress);

        jLabel11.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Address :");

        jButtonAddCustomer.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButtonAddCustomer.setText("Add Customer");
        jButtonAddCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonAddCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCustomerActionPerformed(evt);
            }
        });

        dateChooserField.setCurrentView(new datechooser.view.appearance.AppearancesList("Swing",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    dateChooserField.setFieldFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 13));
    dateChooserField.setMaxDate(new java.util.GregorianCalendar(2022, 6, 1));
    dateChooserField.setMinDate(new java.util.GregorianCalendar(2021, 6, 1));

    jLabel12.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
    jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel12.setText("Date Of Issue :");

    jTextFieldPay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jTextFieldPay.setHorizontalAlignment(javax.swing.JTextField.LEFT);

    jLabel13.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
    jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel13.setText("Money Paid :");

    jLabelPicture.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabelPicture.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

    jButtonAddPicture.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
    jButtonAddPicture.setText("Picture");
    jButtonAddPicture.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButtonAddPicture.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonAddPictureActionPerformed(evt);
        }
    });

    jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
    jLabel3.setForeground(new java.awt.Color(0, 153, 51));
    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel3.setText("Not compulsary");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonSearchBookId, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextBookNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(4, 4, 4)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                                    .addComponent(jTextBookPublisher)
                                    .addComponent(jTextPrice)
                                    .addComponent(jTextNumbers))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButtonRentBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(dateChooserField, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                                .addComponent(jTextFieldPay)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(8, 8, 8))))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(76, 76, 76)
                    .addComponent(jComboBoxEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSeparator2)))
            .addGap(32, 32, 32)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(24, 24, 24)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonSearchCustomerId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jTextCustomer_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonAddPicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabelPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextCustomerName)
                        .addComponent(jTextCustomerLastName)
                        .addComponent(jTextCustomerPhone)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                .addComponent(jButtonAddCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(38, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextBookNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonSearchBookId, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextBookPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jComboBoxEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dateChooserField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldPay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(49, 49, 49))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelPicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jButtonAddPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextCustomer_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonSearchCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextCustomerLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextCustomerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonAddCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonRentBook, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(20, 20, 20))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jSeparator1)
                    .addContainerGap())))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRentBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRentBookActionPerformed
        if(Online.equals("YES"))
            RentBook_Online();
        else
            RentBook();
    }//GEN-LAST:event_jButtonRentBookActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(Online.equals("YES")){
            IssuedBooks_Table table = new IssuedBooks_Table();
            table.Online = "YES";
        table.setVisible(true);
        table.pack();
        table.setLocationRelativeTo(null);
        this.dispose();
        }
        else
        {
            IssuedBooks_Table table = new IssuedBooks_Table();
        table.setVisible(true);
        table.pack();
        table.setLocationRelativeTo(null);
        this.dispose();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButtonAddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCustomerActionPerformed
        if(Online.equals("YES")){
            AddCustomer_Online();
        }
        else{
            AddCustomer();
        }
        
    }//GEN-LAST:event_jButtonAddCustomerActionPerformed
    
    private void jButtonSearchCustomerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchCustomerIdActionPerformed
        if(Online.equals("YES"))
            SearchCustomerId_Online();
        else
            SearchCustomerId();
    }//GEN-LAST:event_jButtonSearchCustomerIdActionPerformed

    private void jButtonSearchBookIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchBookIdActionPerformed
        if(Online.equals("YES"))
            SearchBook_Online();
        else
            SearchBook();
    }//GEN-LAST:event_jButtonSearchBookIdActionPerformed

    private void jTextCustomerPhoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextCustomerPhoneKeyTyped
        char num = evt.getKeyChar();
        if(num == KeyEvent.VK_ENTER)
        jTextAreaAddress.grabFocus();
         
        else if(!(Character.isDigit(num)
                ||(num == KeyEvent.VK_BACK_SPACE)
                ||(num == KeyEvent.VK_DELETE)))
            evt.consume();
    }//GEN-LAST:event_jTextCustomerPhoneKeyTyped

    private void jTextCustomer_IdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextCustomer_IdKeyTyped
        char num = evt.getKeyChar();
        if(num == KeyEvent.VK_ENTER)
        jButtonSearchCustomerId.grabFocus();
    }//GEN-LAST:event_jTextCustomer_IdKeyTyped

    private void jTextCustomerNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextCustomerNameKeyTyped
        char num = evt.getKeyChar();
        if(num == KeyEvent.VK_ENTER)
        jTextCustomerLastName.grabFocus();
    }//GEN-LAST:event_jTextCustomerNameKeyTyped

    private void jTextCustomerLastNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextCustomerLastNameKeyTyped
        char num = evt.getKeyChar();
        if(num == KeyEvent.VK_ENTER)
        jTextCustomerPhone.grabFocus();
    }//GEN-LAST:event_jTextCustomerLastNameKeyTyped

    private void jTextAreaAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaAddressKeyTyped
        char num = evt.getKeyChar();
        if(num == KeyEvent.VK_ENTER)
        jButtonAddCustomer.grabFocus();
    }//GEN-LAST:event_jTextAreaAddressKeyTyped

    private void jButtonAddPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPictureActionPerformed
        java.io.File f = showFileDialog(true);
        try {
            image = ImageIO.read(f);
            Image a = image.getScaledInstance(155, 155, Image.SCALE_DEFAULT);
            jLabelPicture.setIcon(new ImageIcon(a));
            this.validate();
        } catch(Exception ex) {}
    }//GEN-LAST:event_jButtonAddPictureActionPerformed

    private void jTextBookNameSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextBookNameSearchKeyTyped
        char num = evt.getKeyChar();
        if(num == KeyEvent.VK_ENTER){
        
            try {
            conn con = new conn();
                String sql = "select * from book where bookName = ?";
		PreparedStatement st = con.c.prepareStatement(sql);
		st.setString(1, jTextBookNameSearch.getText());
		ResultSet rs = st.executeQuery();
		rs.next();
                if (rs.getRow() == 1) {
                    jTextBookPublisher.setText(rs.getString("publisher"));
                    jTextPrice.setText(rs.getString("price"));
                    jTextNumbers.setText(rs.getString("Numbers"));
                    jTextLocation.setText(rs.getString("Location"));
                    jComboBoxEdition.setSelectedItem(rs.getString("edition"));
                    st.close();
                    con.c.close(); 
		}
                else
                    JOptionPane.showMessageDialog(this, "Book not Exist");
		st.close();
		rs.close();
                jTextFieldPay.grabFocus();
        }catch(SQLException | HeadlessException e){
            JOptionPane.showMessageDialog(this,"Database Error");
        }
            
            
        }
    }//GEN-LAST:event_jTextBookNameSearchKeyTyped
        
    private File showFileDialog(final boolean open) {
    JFileChooser fc = new JFileChooser("Open a File");
    javax.swing.filechooser.FileFilter ff = new javax.swing.filechooser.FileFilter() {
       @Override
       public boolean accept(java.io.File f) {
          String name = f.getName().toLowerCase();
          if(open)
             return f.isDirectory() ||
                name.endsWith(".jpeg") || name.endsWith(".png") || name.endsWith(".jpg");
          return f.isDirectory()||name.endsWith(".txt");
          }
       @Override
       public String getDescription() {
          if(open)
             return "Picture (*.jpeg, *.png)";
          return "Text (*.txt)";
          }
       };
    fc.setAcceptAllFileFilterUsed(false);
    fc.addChoosableFileFilter(ff);

    java.io.File f = null;
   if(open && fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){    
       f = fc.getSelectedFile();
       ImagePath  =  fc.getSelectedFile().getAbsolutePath();
   }
    else if(!open && fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
      f = fc.getSelectedFile();
        
    return f;
    }
    
    
    public boolean AlreadyExist(String Id){ 
        boolean alreadyExist = false;
        String query = "SELECT * FROM customer where customer_id =?";
        try {
            conn con = new conn();
            PreparedStatement st = con.c.prepareStatement(query);
            st.setString(1, Id);
            ResultSet rs = st.executeQuery();
            
            if(rs.next()){
                alreadyExist = true;
                JOptionPane.showMessageDialog(null,"This Customer Id Already Exist");
            }
                st.close();
                con.c.close(); 
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null,"Error please Try Again Later!");
        }
        return alreadyExist;
    }
    public boolean AlreadyExist_Online(String Id){ 
        boolean alreadyExist = false;
        String query = "SELECT * FROM customer where customer_id =?";
        try {
            conn con = new conn("YES");
            PreparedStatement st = con.c.prepareStatement(query);
            st.setString(1, Id);
            ResultSet rs = st.executeQuery();
            
            if(rs.next()){
                alreadyExist = true;
                JOptionPane.showMessageDialog(null,"This Customer Id Already Exist");
            }
                st.close();
                con.c.close(); 
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null,"Error please Try Again Later!");
        }
        return alreadyExist;
    }
    

    private boolean check_Customers_Image(){
        conn con = new conn();
        String sql = "select * from customer where customer_id = ?";
        try {
        PreparedStatement st = con.c.prepareStatement(sql);
        st.setString(1, jTextCustomer_Id.getText());
        ResultSet rs = st.executeQuery();
        rs.next();
        
        if (rs.getBytes("picture") == null)
            return false;
                st.close();
                con.c.close(); 
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Network Error");
        }
        return true;
    }
    
    private boolean check_Customers_Image_Online(){
        conn con = new conn("YES");
        String sql = "select * from customer where customer_id = ?";
        try {
        PreparedStatement st = con.c.prepareStatement(sql);
        st.setString(1, jTextCustomer_Id.getText());
        ResultSet rs = st.executeQuery();
        rs.next();
        
        if (rs.getBytes("picture") == null)
            return false;
                st.close();
                con.c.close(); 
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Network Error");
        }
        return true;
    }
    
    private void SearchCustomerId(){
        try {
            conn con = new conn();
                String sql = "select * from customer where customer_id = ?";
                
		PreparedStatement st = con.c.prepareStatement(sql);
		st.setString(1, jTextCustomer_Id.getText());
		ResultSet rs = st.executeQuery();
		rs.next();
                if(rs.getRow() == 1 && check_Customers_Image() == true){
                    jTextCustomerName.setText(rs.getString("name"));
                    jTextCustomerLastName.setText(rs.getString("lastName"));
                    jTextCustomerPhone.setText(rs.getString("phone"));
                    jTextAreaAddress.setText(rs.getString("Address"));
                    jButtonRentBook.setEnabled(true);
                    Pic = rs.getBytes("picture");
                    HasImage = "Yes";
                    try {                        
                    InputStream in = new ByteArrayInputStream(Pic);
                    image = ImageIO.read(in);
                    Image a = image.getScaledInstance(155, 165, Image.SCALE_DEFAULT);
                    jLabelPicture.setIcon(new ImageIcon(a));
                    }   catch(Exception e){
                        JOptionPane.showMessageDialog(this, "Error Database ");
                    }
                    st.close();
                    rs.close();
                }
                else if(rs.getRow() == 1 && check_Customers_Image() == false){
                    jTextCustomerName.setText(rs.getString("name"));
                    jTextCustomerLastName.setText(rs.getString("lastName"));
                    jTextCustomerPhone.setText(rs.getString("phone"));
                    jTextAreaAddress.setText(rs.getString("Address"));
                    jButtonRentBook.setEnabled(true);
                    jLabelPicture.setIcon(null);
                    HasImage = null;
                     st.close();
                     rs.close();
                }
                else{
                    jButtonRentBook.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "New Customer Please Add him First");
                    jButtonAddCustomer.setEnabled(true);
                    jTextCustomerName.setText("");
                    jTextCustomerLastName.setText("");
                    jTextCustomerPhone.setText("");
                    jTextAreaAddress.setText("");
                    jTextCustomerName.grabFocus();
                    HasImage = null;
                    jButtonAddPicture.setEnabled(true);
                }
        }catch(SQLException | HeadlessException e){
            JOptionPane.showMessageDialog(this,"Data Base Error");
        } 
    }
    private void SearchCustomerId_Online(){
        try {
            conn con = new conn("YES");
                String sql = "select * from customer where customer_id = ?";
                
		PreparedStatement st = con.c.prepareStatement(sql);
		st.setString(1, jTextCustomer_Id.getText());
		ResultSet rs = st.executeQuery();
		rs.next();
                if(rs.getRow() == 1 && check_Customers_Image_Online() == true){
                    jTextCustomerName.setText(rs.getString("name"));
                    jTextCustomerLastName.setText(rs.getString("lastName"));
                    jTextCustomerPhone.setText(rs.getString("phone"));
                    jTextAreaAddress.setText(rs.getString("Address"));
                    jButtonRentBook.setEnabled(true);
                    Pic = rs.getBytes("picture");
                    HasImage = "Yes";
                    try {                        
                    InputStream in = new ByteArrayInputStream(Pic);
                    image = ImageIO.read(in);
                    Image a = image.getScaledInstance(155, 165, Image.SCALE_DEFAULT);
                    jLabelPicture.setIcon(new ImageIcon(a));
                    }   catch(Exception e){
                        JOptionPane.showMessageDialog(this, "Error Database ");
                    }
                    st.close();
                    rs.close();
                }
                else if(rs.getRow() == 1 && check_Customers_Image_Online() == false){
                    jTextCustomerName.setText(rs.getString("name"));
                    jTextCustomerLastName.setText(rs.getString("lastName"));
                    jTextCustomerPhone.setText(rs.getString("phone"));
                    jTextAreaAddress.setText(rs.getString("Address"));
                    jButtonRentBook.setEnabled(true);
                    jLabelPicture.setIcon(null);
                    HasImage = null;
                     st.close();
                     rs.close();
                }
                else{
                    jButtonRentBook.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "New Customer Please Add him First");
                    jButtonAddCustomer.setEnabled(true);
                    jTextCustomerName.setText("");
                    jTextCustomerLastName.setText("");
                    jTextCustomerPhone.setText("");
                    jTextAreaAddress.setText("");
                    jTextCustomerName.grabFocus();
                    HasImage = null;
                    jButtonAddPicture.setEnabled(true);
                }
        }catch(SQLException | HeadlessException e){
            JOptionPane.showMessageDialog(this,"Data Base Error");
        } 
    }
    
    private void AddCustomer() {
        if(AlreadyExist(jTextCustomer_Id.getText())) 
            return;
         else if (jTextCustomerName.getText().equals("")|| jTextCustomerLastName.getText().equals("")
                || jTextCustomerPhone.getText().equals("") || jTextAreaAddress.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Please Enter all the Details");
        }
        else 
            try {
            conn con = new conn();
            String sql = "insert into customer (customer_id, name, lastName, phone,"
            + " Address) values(?, ?, ?, ?, ?)";
            
            String sqlwithPicture = "insert into customer (customer_id, name, lastName, phone,"
            + " Address, picture) values(?, ?, ?, ?, ?, ?)";
            
            if(ImagePath != null){
            InputStream in = new FileInputStream(ImagePath);
            byte[] bytes = IOUtils.toByteArray(in);
            
            PreparedStatement st = con.c.prepareStatement(sqlwithPicture);
            st.setString(1, jTextCustomer_Id.getText());
            st.setString(2, jTextCustomerName.getText());
            st.setString(3, jTextCustomerLastName.getText());
            st.setString(4, jTextCustomerPhone.getText());
            st.setString(5, jTextAreaAddress.getText());
            st.setBytes(6, bytes);
            int rs = st.executeUpdate();
            HasImage = "Yes";
            
            System.out.println();
            if (rs > 0){
                JOptionPane.showMessageDialog(null, "Customer Has been Added Succefully");
                 jButtonAddCustomer.setEnabled(false);
            }
                st.close();
                con.c.close();
            }
            else if(ImagePath == null) {
                PreparedStatement st = con.c.prepareStatement(sql);
                st.setString(1, jTextCustomer_Id.getText());
                st.setString(2, jTextCustomerName.getText());
                st.setString(3, jTextCustomerLastName.getText());
                st.setString(4, jTextCustomerPhone.getText());
                st.setString(5, jTextAreaAddress.getText());           
                HasImage = null;
            int rs = st.executeUpdate();
            System.out.println();
            if (rs > 0){
                JOptionPane.showMessageDialog(null, "Succesfully done without picture");
                 jButtonAddCustomer.setEnabled(false);
            }
                st.close();
                con.c.close();
            }
            else {
            JOptionPane.showMessageDialog(null, "Error");
            jTextCustomer_Id.setText("");
            jTextCustomerName.setText("");
            jTextCustomerLastName.setText("");
            jTextCustomerPhone.setText("");
            jTextAreaAddress.setText(""); 
            HasImage = null;
            jLabelPicture.setIcon(null);
            }
            jButtonRentBook.setEnabled(true);
            jTextBookNameSearch.grabFocus();
            }
        catch(IOException | SQLException | HeadlessException e){
            JOptionPane.showMessageDialog(this, "Can not connect to Server...");
        }
    }
    
    private void AddCustomer_Online() {
        if(AlreadyExist_Online(jTextCustomer_Id.getText())) {
        } 
        else if (jTextCustomerName.getText().equals("")|| jTextCustomerLastName.getText().equals("")
                || jTextCustomerPhone.getText().equals("") || jTextAreaAddress.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Please Enter all the Details");
        }
        else 
            try {
            conn con = new conn("YES");
            String sql = "insert into customer (customer_id, name, lastName, phone,"
            + " Address) values(?, ?, ?, ?, ?)";
            
            String sqlwithPicture = "insert into customer (customer_id, name, lastName, phone,"
            + " Address, picture) values(?, ?, ?, ?, ?, ?)";
            
            if(ImagePath != null){
            InputStream in = new FileInputStream(ImagePath);
            byte[] bytes = IOUtils.toByteArray(in);
            
            PreparedStatement st = con.c.prepareStatement(sqlwithPicture);
            st.setString(1, jTextCustomer_Id.getText());
            st.setString(2, jTextCustomerName.getText());
            st.setString(3, jTextCustomerLastName.getText());
            st.setString(4, jTextCustomerPhone.getText());
            st.setString(5, jTextAreaAddress.getText());
            st.setBytes(6, bytes);
            int rs = st.executeUpdate();
            HasImage = "Yes";
            
            System.out.println();
            if (rs > 0){
                JOptionPane.showMessageDialog(null, "Customer Has been Added Succefully");
                 jButtonAddCustomer.setEnabled(false);
            }
                st.close();
                con.c.close();
            }
            else if(ImagePath == null) {
                PreparedStatement st = con.c.prepareStatement(sql);
                st.setString(1, jTextCustomer_Id.getText());
                st.setString(2, jTextCustomerName.getText());
                st.setString(3, jTextCustomerLastName.getText());
                st.setString(4, jTextCustomerPhone.getText());
                st.setString(5, jTextAreaAddress.getText());           
                HasImage = null;
            int rs = st.executeUpdate();
            System.out.println();
            if (rs > 0){
                JOptionPane.showMessageDialog(null, "Succesfully done without picture");
                 jButtonAddCustomer.setEnabled(false);
            }
                st.close();
                con.c.close();
            }
            else {
            JOptionPane.showMessageDialog(null, "Error");
            jTextCustomer_Id.setText("");
            jTextCustomerName.setText("");
            jTextCustomerLastName.setText("");
            jTextCustomerPhone.setText("");
            jTextAreaAddress.setText(""); 
            HasImage = null;
            jLabelPicture.setIcon(null);
            }
            jButtonRentBook.setEnabled(true);
            jTextBookNameSearch.grabFocus();
            }
        catch(IOException | SQLException | HeadlessException e){
            JOptionPane.showMessageDialog(this, "Can not connect to Server...");
        }
    }
    private void SearchBook(){
        try {
            conn con = new conn();
                String sql = "select * from book where bookName = ?";
		PreparedStatement st = con.c.prepareStatement(sql);
		st.setString(1, jTextBookNameSearch.getText());
		ResultSet rs = st.executeQuery();
		rs.next();
                if (rs.getRow() == 1) {
                    jTextBookPublisher.setText(rs.getString("publisher"));
                    jTextPrice.setText(rs.getString("price"));
                    jTextNumbers.setText(rs.getString("Numbers"));
                    jTextLocation.setText(rs.getString("Location"));
                    jComboBoxEdition.setSelectedItem(rs.getString("edition"));
                    st.close();
                    con.c.close(); 
		}
                else
                    JOptionPane.showMessageDialog(this, "This Book Not Exist");
		st.close();
		rs.close();      
        }catch(SQLException | HeadlessException e){
            JOptionPane.showMessageDialog(this,"DataBase Error");
        }
    }
    private void SearchBook_Online(){
        try {
            conn con = new conn("YES");
                String sql = "select * from book where bookName = ?";
		PreparedStatement st = con.c.prepareStatement(sql);
		st.setString(1, jTextBookNameSearch.getText());
		ResultSet rs = st.executeQuery();
		rs.next();
                if (rs.getRow() == 1) {
                    jTextBookPublisher.setText(rs.getString("publisher"));
                    jTextPrice.setText(rs.getString("price"));
                    jTextNumbers.setText(rs.getString("Numbers"));
                    jTextLocation.setText(rs.getString("Location"));
                    jComboBoxEdition.setSelectedItem(rs.getString("edition"));
                    st.close();
                    con.c.close(); 
		}
                else
                    JOptionPane.showMessageDialog(this, "This Book Not Exist");
		st.close();
		rs.close();      
        }catch(SQLException | HeadlessException e){
            JOptionPane.showMessageDialog(this,"DataBase Error");
        }
    }
    
    private void RentBook(){
        if(jTextCustomer_Id.getText().equals("")||jTextCustomerName.getText().equals("")
           || jTextCustomerLastName.getText().equals("")
           || jTextCustomerPhone.getText().equals("") 
           || jTextAreaAddress.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Enter all the customer details");
        else if(jTextBookNameSearch.getText().equals("")
                || jTextBookPublisher.getText().equals("")
                || jTextPrice.getText().equals("")
                || dateChooserField.getText().equals("")
                || jTextFieldPay.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Please Fill All the Field ");
        else if(Integer.valueOf(jTextNumbers.getText()) <= 1){
            JOptionPane.showMessageDialog(this, "This Book is out of Stack");
        }
        else
        
        
        try {         
            conn con = new conn();
            String sql = "insert into issueBook (bookName, customerName, customerPhone, PublisherName "
                    + ",price ,Numbers, edition ,dateOfIssue, moneyPaid, location) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            String sqlwithPicture = "insert into issueBook (bookName, customerName, customerPhone, PublisherName "
                    + ",price ,Numbers, edition ,dateOfIssue, moneyPaid, location, picture) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            if(HasImage == null) {
            PreparedStatement st = con.c.prepareStatement(sql);
            st.setString(1, jTextBookNameSearch.getText());
            st.setString(2, jTextCustomerName.getText());
            st.setString(3, jTextCustomerPhone.getText());
            st.setString(4, jTextBookPublisher.getText());
            st.setString(5, jTextPrice.getText());
            st.setString(6, jTextNumbers.getText());
            st.setString(7, jComboBoxEdition.getSelectedItem().toString());
            st.setString(8, dateChooserField.getText());
            st.setString(9, jTextLocation.getText());
            st.setString(10, jTextFieldPay.getText());
            HasImage = null;
            int rs = st.executeUpdate();
            System.out.println();
            if (rs > 0){
            JOptionPane.showMessageDialog(null, "Succefully done without picture");
            st.close();
            con.c.close();
            }
            
            } else if(HasImage != null){  
                PreparedStatement st = con.c.prepareStatement(sqlwithPicture);
                st.setString(1, jTextBookNameSearch.getText());
                st.setString(2, jTextCustomerName.getText());
                st.setString(3, jTextCustomerPhone.getText());
                st.setString(4, jTextBookPublisher.getText());
                st.setString(5, jTextPrice.getText());
                st.setString(6, jTextNumbers.getText());
                st.setString(7, jComboBoxEdition.getSelectedItem().toString());
                st.setString(8, dateChooserField.getText());
                st.setString(9, jTextFieldPay.getText());  
                st.setString(10, jTextLocation.getText());
                st.setBytes(11, Pic);
                
                HasImage = "Yes";
                int rs = st.executeUpdate();
                System.out.println();
                if (rs > 0){
                JOptionPane.showMessageDialog(null, "Succesfully done with picture");
                st.close();
                con.c.close();    
                }
            }
            else {
            JOptionPane.showMessageDialog(null, "Error ");
            jTextBookNameSearch.setText("");
            jTextFieldPay.setText("");
            jTextBookPublisher.setText("");
            jTextPrice.setText("");
            jTextNumbers.setText("");
            jTextLocation.setText("");
            jComboBoxEdition.setSelectedIndex(0);
            jTextLocation.setText("");
            jTextCustomer_Id.setText("");
            jTextCustomerName.setText("");
            jTextCustomerLastName.setText("");
            jTextCustomerPhone.setText("");
            jTextAreaAddress.setText("");
            jLabelPicture.setIcon(null);
            
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "Network Error");
        }
    }
    private void RentBook_Online(){
        if(jTextCustomer_Id.getText().equals("")||jTextCustomerName.getText().equals("")
           || jTextCustomerLastName.getText().equals("")
           || jTextCustomerPhone.getText().equals("") 
           || jTextAreaAddress.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Enter all the customer details");
        else if(jTextBookNameSearch.getText().equals("")
                || jTextBookPublisher.getText().equals("")
                || jTextPrice.getText().equals("")
                || dateChooserField.getText().equals("")
                || jTextFieldPay.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Please Fill All the Field ");
        else if(Integer.valueOf(jTextNumbers.getText()) <= 1){
            JOptionPane.showMessageDialog(this, "This Book is out of Stack");
        }
        else
        
        
        try {         
            conn con = new conn("YES");
            String sql = "insert into issueBook (bookName, customerName, customerPhone, PublisherName "
                    + ",price ,Numbers, edition ,dateOfIssue, moneyPaid, location) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            String sqlwithPicture = "insert into issueBook (bookName, customerName, customerPhone, PublisherName "
                    + ",price ,Numbers, edition ,dateOfIssue, moneyPaid, location, picture) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            if(HasImage == null) {
            PreparedStatement st = con.c.prepareStatement(sql);
            st.setString(1, jTextBookNameSearch.getText());
            st.setString(2, jTextCustomerName.getText());
            st.setString(3, jTextCustomerPhone.getText());
            st.setString(4, jTextBookPublisher.getText());
            st.setString(5, jTextPrice.getText());
            st.setString(6, jTextNumbers.getText());
            st.setString(7, jComboBoxEdition.getSelectedItem().toString());
            st.setString(8, dateChooserField.getText());
            st.setString(9, jTextLocation.getText());
            st.setString(10, jTextFieldPay.getText());
            HasImage = null;
            int rs = st.executeUpdate();
            System.out.println();
            if (rs > 0){
            JOptionPane.showMessageDialog(null, "Succefully done without picture");
            st.close();
            con.c.close();
            }
            
            }
            else if(HasImage != null){  
                PreparedStatement st = con.c.prepareStatement(sqlwithPicture);
                st.setString(1, jTextBookNameSearch.getText());
                st.setString(2, jTextCustomerName.getText());
                st.setString(3, jTextCustomerPhone.getText());
                st.setString(4, jTextBookPublisher.getText());
                st.setString(5, jTextPrice.getText());
                st.setString(6, jTextNumbers.getText());
                st.setString(7, jComboBoxEdition.getSelectedItem().toString());
                st.setString(8, dateChooserField.getText());
                st.setString(9, jTextFieldPay.getText());  
                st.setString(10, jTextLocation.getText());
                st.setBytes(11, Pic);
                
                HasImage = "Yes";
                int rs = st.executeUpdate();
                System.out.println();
                if (rs > 0){
                JOptionPane.showMessageDialog(null, "Succesfully done with picture");
                st.close();
                con.c.close();    
                }
            }
            else {
            JOptionPane.showMessageDialog(null, "Error ");
            jTextBookNameSearch.setText("");
            jTextFieldPay.setText("");
            jTextBookPublisher.setText("");
            jTextPrice.setText("");
            jTextNumbers.setText("");
            jTextLocation.setText("");
            jComboBoxEdition.setSelectedIndex(0);
            jTextLocation.setText("");
            jTextCustomer_Id.setText("");
            jTextCustomerName.setText("");
            jTextCustomerLastName.setText("");
            jTextCustomerPhone.setText("");
            jTextAreaAddress.setText("");
            jLabelPicture.setIcon(null);
            
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "Network Error"+e.getMessage());
        }
    }
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new IssueBook().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dateChooserField;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonAddCustomer;
    private javax.swing.JButton jButtonAddPicture;
    private javax.swing.JButton jButtonRentBook;
    private javax.swing.JButton jButtonSearchBookId;
    private javax.swing.JButton jButtonSearchCustomerId;
    private javax.swing.JComboBox jComboBoxEdition;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelPicture;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextAreaAddress;
    private javax.swing.JTextField jTextBookNameSearch;
    private javax.swing.JTextField jTextBookPublisher;
    private javax.swing.JTextField jTextCustomerLastName;
    private javax.swing.JTextField jTextCustomerName;
    private javax.swing.JTextField jTextCustomerPhone;
    private javax.swing.JTextField jTextCustomer_Id;
    private javax.swing.JTextField jTextFieldPay;
    private javax.swing.JTextField jTextLocation;
    private javax.swing.JTextField jTextNumbers;
    private javax.swing.JTextField jTextPrice;
    // End of variables declaration//GEN-END:variables
}
